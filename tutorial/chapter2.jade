.step(data-file='Authy2FA/Controllers/ManageController.cs', data-highlight='112-134')
  :markdown
    ## Registering a User with Authy

    When a new User signs up for our website, we call this controller, which
    handles saving our new User to the database as well as registering the User
    with Authy.

    All Authy needs to get a user set up for your application is the email,
    phone number and country code. In order to do two-factor authentication,
    we need to make sure we ask for these things at the point of sign up.

    Once we register the User with Authy we get an `AuthyId` back. This is
    very important since it's how we will verify the identity of our User with
    Authy.

    ---

    **See Also:**
    * [Introduction to ASP.NET Identity](//www.asp.net/identity/overview/getting-started/introduction-to-aspnet-identity)
    * [Enabling a User with Authy](//docs.authy.com/#section-Enabling_two-factor_on_a_user)

.step(data-file='Authy2FA/Providers/AuthyOneTouchProvider.cs', data-highlight='44-56')
  :markdown
    ## Logging in with Authy OneTouch

    When a User attempts to log in to our website, we will ask them for a second 
    form of identification. Let's take a look at OneTouch verification first. 

    ![Authy OneTouch Approval](//howtodocs.s3.amazonaws.com/onetouch-approved.gif)

    OneTouch works like so:
    * We attempt to send a User a _OneTouch Approval Request_
    * If the User has OneTouch enabled, we will get a `success` message back
    * The User hits 'approve' in their Authy app
    * Authy makes a POST request to our app with an 'approved' status
    * We log the User in

    In the next steps we'll look at how we handle cases where the User does not
    have OneTouch, or denies the login request.

.step(data-file='Authy2FA/Providers/AuthyOneTouchProvider.cs', data-highlight='44-56')
  :markdown
    ## Sending the OneTouch Request

    When our User logs in, we let the user decide which two-factor authentication
    provider will be used. It can be either _Authy One Touch_ or _Authy Token_.
    Authy OneTouch should be used when the user has a registered OneTouch
    device.

    Authy lets us pass details with our OneTouch request, including a message,
    a logo and any other details we want to send. We could easily send any
    number of details by appending `details['some_detail']`. You could imagine a
    scenario where we send a OneTouch request to approve a money transfer:

    ```javascript
    var request = new NameValueCollection
    {
      {"message", "Request to Send Money to Jarod's vault"},
      {"details['Request From']", "Jarod"},
      {"details['Amount Request']", "1,000,000"},
      {"details['Currency']", "Galleons"}
    };
    ```
    Once we send the request we need to update our User's `AuthyStatus` based
    on the response.

    --- 

    **See Also:**
    * [NameValueCollection Class](//msdn.microsoft.com/en-us/library/system.collections.specialized.namevaluecollection.aspx)

.step(data-file='Authy2FA/Controllers/AuthyController.cs', data-highlight='32-47, 73-77')
  :markdown
    ## Configuring the OneTouch callback

    In order for our app to know what the User did after we sent the OneTouch
    request, we need to register a callback endpoint with Authy.

    ![Authy OneTouch Callback](//howtodocs.s3.amazonaws.com/onetouch-callback-endpoint.png)

    **Note:** In order to verify that the request is coming from Authy, we've
    written a helper method that will halt the request if it appears it isn't coming
    from Authy.

    Here in our callback, we look up the user using the `authy_id` sent with the
    Authy POST request. Ideally at this point we would probably use a websocket
    to let our client know that we received a response from Authy. However for
    this version we're going to keep it simple and just update the
    `AuthyStatus` on the User. Then all our client-side code needs to do is
    check for `user.AuthyStatus == "approved"` before logging her in.


    Let's take a look at the client-side code that will be handling this.

    ---

    **See Also:**
    * [UserManager<TUser, TKey> Class](//msdn.microsoft.com/en-us/library/dn613290.aspx)

.step(data-file='Authy2FA/Scripts/onetouch.js')
  :markdown
    ## Handle Two-Factor in the Browser

    We've already taken a look at what's happening on the server side, so let's
    step in front of the cameras now and see how our JavaScript is interacting
    with those server endpoints.

    When we expect a OneTouch response, we will begin polling
    `/Authy/OneTouchStatus` until we either see OneTouch login was either
    approved or denied. Let's take a  look at this controller and see what is
    happening.

    --- 

    **See Also:**
    * [jQuery Post method](//api.jquery.com/jquery.post/)
    * [jQuery submit()](//api.jquery.com/submit/)

.step(data-file='Authy2FA/Controllers/AuthyController.cs', data-highlight='49-71')
  :markdown
    ## Check Login Status

    Here is the endpoint that our JavaScript is polling. It is waiting for the
    user status to be either **approved** or **denied**.

    ---

    **See Also:**
    * [SignInManager<TUser, TKey>.GetVerifiedUserIdAsync Method ()](//msdn.microsoft.com/en-us/library/mt173765.aspx)
    * [UserManager<TUser, TKey>.FindByIdAsync Method](https://msdn.microsoft.com/en-us/library/dn497542.aspx)

.step(data-file='Authy2FA/Controllers/AccountController.cs', data-highlight='150-172')
  :markdown
    ## Finish the 2FA Step

    If the `AuthyStatus` is approved, then the user will be redirected to the
    home page, otherwise we'll show the `/Account/Login` form.

    ---

    **See Also:**
    * [SignInManager<TUser, TKey>.TwoFactorSignInAsync Method](https://msdn.microsoft.com/en-us/library/mt173758.aspx)

.step
  :markdown
    ## Where to next?

    That's it! We've just implemented two-factor auth using three different
    methods and the latest in Authy technology.

    If you're a C# developer working with Twilio, you might enjoy these
    other tutorials:

    [**IVR: Phone Tree**](https://www.twilio.com/docs/howto/walkthrough/ivr-phone-tree/csharp/mvc)

    Easily route callers to the right people and information with an IVR
    (interactive voice response) system

    [**Call Tracking**](//www.twilio.com/docs/howto/walkthrough/call-tracking/csharp/mvc)

    Use Twilio to track the effectiveness of your marketing campaigns.

    ### Did this help?

    Thanks for checking out this tutorial! If you have any feedback to share
    with us, we'd love to hear it. Tweet
    [@twilio](http://twitter.com/twilio) to let us know what you think.
