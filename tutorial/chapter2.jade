.step(data-title='Updating the User Model', data-file='Authy2FA/Models/IdentityModels.cs', data-highlight='10-12')
  :markdown
    ## Updating the User Model

    The Identity system has a few persistent Entity Framework models that contain profile information about the user. We can use these largely unchanged, but there is one extra bit of data we need to track about the user - an Authy user ID. We use this ID for Authy API requests to send 2FA validation tokens and to verify the tokens they input during the login process.

    We're using [code first migrations](http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application) in this project, so we declare a new `string` property on the User model to contain their Authy ID, which we will populate later.

    When running this project locally, you would need to open the Package Manager console and enter the `Enable-Migrations` command first. You can update the database with the migrations generated for this model already with the `Update-Database` command in the package manager console.  This migration should exist already if you downloaded the project from GitHub

    That's all we need to change at the model level, but we're not done configuring the Identity system yet.  Let's see how we configure Authy as the 2FA provider for our application..
.step(data-title="Register Authy as a 2FA Provider", data-file='Authy2FA/App_Start/IdentityConfig.cs', data-highlight="77-78")
  :markdown
    ## Register Authy as a 2FA Provider

    `IdentityConfig.cs` is the primary configuration file for the Identity system in our application. In this file, you can configure everything from password strength requirements to 2FA providers, which we do in these two lines of code here.

    Explaining the features of Identity namespace is not something we'll be able to do justice to in this tutorial, so if you'd like to learn more about how Identity is configured, token providers, and the other specifics of the API, you might consider these resources from Microsoft:

    * [Getting Started with Identity](http://www.asp.net/identity)
    * [Identity Namespace API docs](https://msdn.microsoft.com/en-us/library/microsoft.aspnet.identity(v=vs.108).aspx)

    Let's take a brief look at the `AuthyTokenProvider` class to see what it needs to do to function as a 2FA provider for our application.

.step(data-title="The Authy 2FA Provider", data-file='Authy2FA/AuthyProvider/AuthyProvider.cs')
  :markdown
    ## The Authy 2FA Provider

    In this file, we create the `AuthyProvider` namespace, which contains a `AuthyTokenProvider` class. This class [is used by ASP.NET Identity](http://www.asp.net/identity/overview/features-api/two-factor-authentication-using-sms-and-email-with-aspnet-identity#reg) to both send a verification token to a device, and to verify the token that was sent.

    The two key methods to note here are `NotifyAsync` and `ValidateAsync`. These methods use the Authy client to send a one-time password and validate a one-time password, respectively.  Each depends on being provided with an Identity user class with a persistent `AuthyId` string property, which we created on the model earlier.

    Now that we've made it possible to use Authy for 2FA, let's see how a user would opt in to using 2FA in the first place.

.step(data-title="Enabling Two-Factor Authentication", data-file='Authy2FA/Controllers/ManageController.cs', data-highlight="114-134")
  :markdown
    ## Enabling Two-Factor Authentication for a User

    In the default setup for an ASP.NET MVC app using Identity for authentication, a user must sign up first, and then elect to enable two-factor authentication after creating an account. To use Authy for 2FA, we need to add an [Authy User](https://docs.authy.com/#section-Enabling_two-factor_on_a_user) for them associated with the phone number they enter.

    This is the controller method that handles adding the phone number for the 2FA step. We've added code here to use the Authy API client to create a new Authy user, and to store their Authy user ID on the Identity model in our database. Now the user account in our database is tied to an Authy user, so we can verify any one-time password codes sent to the user.

    Now that our user has elected 2FA for login, let's step through the actual login flow.